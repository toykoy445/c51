/****************************************Copyright (c)**************************************************
**                               	                    
**                                 	
**--------------File Info-------------------------------------------------------------------------------
** 功能描述：
** 1.实现数据的转发,5个温度点	
** This file provides the solution transfering AMETEK's original data* 
** to DGL protocol.(The sensor is new!)
** 2.版本V1.0
** 3.单片机型号: STC12C5A16S2
** 4.开发日期：2012.06.07
********************************************************************************************************/


#include <math.h>
#include <absacc.h>
#include <intrins.h>
#include <float.h>
#include <string.h>
#include <stdlib.h>
#include "reg51.h"
//#include "STC_NEW_8051.H"


#define  uchar unsigned char   
#define  uint  unsigned int
#define  ulong unsigned long
#define  NOP() _nop_();
#define  SomeNOP();_nop_();_nop_();_nop_();_nop_();_nop_();


typedef unsigned char BYTE;
typedef unsigned int WORD;


#define FOSC 11059200L    //晶振频率
#define BAUD 4800         //UART2波特率

/*Define UART parity mode*/		  //校验模式
#define NONE_PARITY     0   //None parity，无校验
#define ODD_PARITY      1   //Odd parity，奇校验
#define EVEN_PARITY     2   //Even parity，偶校验
#define MARK_PARITY     3   //Mark parity
#define SPACE_PARITY    4   //Space parity

#define PARITYBIT ODD_PARITY   //定义校验为奇校验

/*Declare SFR associated with the UART2 *///定义串口2所需SFR
sfr AUXR  = 0x8e;           //Auxiliary register
sfr S2CON = 0x9a;           //UART2 control register
sfr S2BUF = 0x9b;           //UART2 data buffer
sfr BRT   = 0x9c;           //Baudrate generator
sfr IE2   = 0xaf;           //Interrupt control 2

#define S2RI  0x01          //S2CON.0
#define S2TI  0x02          //S2CON.1
#define S2RB8 0x04          //S2CON.2
#define S2TB8 0x08          //S2CON.3

//原有函数的定义
uchar xdata txdata[22];
uchar xdata pcom;
//uchar xdata pcom2;
uchar xdata ametek_1[134];
uchar xdata ametek_2[134];
uchar xdata *ametek;
uchar xdata *ametek_px;

//控制管脚
sbit SEL=P1^1;	   //485控制管脚
sbit Testpin=P1^4;	//测试管脚

//函数声明
void delay(uint);
void error();
unsigned char *switchdgl(unsigned long ametek_base);

//油位,水位过滤相关声明

//定义5个温度点的温度值，从低到高分别是amet1,amet2,amet3,amet4,amet5,
//修改这5个值，然后以适应不同的杆。

#define ametek_h1	225		  //杆的最低温度点高度
#define ametek_h2	450		  //杆的次低温度点高度
#define ametek_h3	675		  //杆的第3个温度点高度
#define ametek_h4	900		  //杆的第4个温度点高度
#define ametek_h5	1125	  //杆的最高温度点高度

double xdata ametek_height[]={ametek_h1,ametek_h2,ametek_h3,ametek_h4,ametek_h5};	//5个高度值
double xdata temper_oil=0;	 //液位值，只用来比较
uchar t_index=0;			//温度值索引
//unsigned int xdata ametek_temper_array[]={0,0,0,0,0}; //
	   

//add at 2011.4.19
//----------------------------------------------------
//uchar xdata dis[8];//按位显示变量

#define ADDCODE 1
#if ADDCODE
double xdata w_queue[5]={0,0,0,0,0};	//水位队列,新值入w_queue[0],w_queue[4]出旧值，如有需要可将队列初始化一下。
uchar w_index=0;			//水位队列索引
double w_max=0;			//水位队列里最大值
double w_min=0;			//水位队列里最小值
double w_sum=0;			//水位队列里总值
uchar w_finish=0;			//在接收函数里，自增5次，然后固定到5，表明水位
						//队列已收到5个数据,可以往上位机发送数据了。
#endif

uint   xdata ametekN=0;

double xdata ametek_double = 0;
double xdata ametek_5point = 0;
long   xdata ametek_oil;
long   xdata ametek_water;
long   xdata ametek_temper;

uchar  xdata meter[5];
uchar  xdata meterN=0;
uchar  xdata txdN=0;

uchar   have_data=0;
uchar  xdata sum=0;

//bit busy;

//延时程序
void delay(uint i)//delay programme ,i is parameter
{
   uint j;
   for(;i>0;i--)
   {     
      for(j=0;j<50;j++)
        {;}
   }           
}

//平整数据，使数据能填充到发射数组里
unsigned char *switchdgl(unsigned long ametek_base)		  
{
	unsigned char xdata dglchar[3];

	dglchar[0]=(uchar)(ametek_base&0x0000007f);
	ametek_base>>=7;
	dglchar[1]=(uchar)(ametek_base&0x0000007f);
	ametek_base>>=7;
	dglchar[2]=(uchar)(ametek_base&0x0000007f);
	return(dglchar);
}

//串口1中断函数
void serial_1(void) interrupt 4 //the vector of USART1 interrupt is 4
{  
    if(RI)
	{
     	        
	 	pcom=SBUF;
     	pcom=pcom&0x7f;
   		RI=0;

      	if(pcom==0x0d)
     	{
       		ametekN=0;
      	}
      	
		*(ametek_px+ametekN)=pcom; //AMETEK杆的数据接收至数组中
  
      	if(ametekN<134)
        {
			ametekN++;
		}
        NOP();
     
	  	if(ametekN==134)
		{
      		ametek=ametek_px;
	  		if(ametek_px==ametek_1)
	   		{ametek_px=ametek_2;}
	   		else
	   		{ametek_px=ametek_1;}
#if ADDCODE
			w_finish++;
			if(w_finish>=5)		 //采到5个数据了
				w_finish=5;		 //已收到5个数据，可以往上位机中发送数据了。
			 						 //跟发送函数里的have_data一起配合使用。
#endif	
		} 
	}

//	UART0_SendStr("STC12C5A60S2\r\nUart0 Test !\r\n");
}

//串口2中断
void serial_2(void) interrupt 8  
{  
	if (S2CON & S2RI)	  	//收到数据									
    {
        S2CON &= ~S2RI;     //Clear receive interrupt flag
        pcom = S2BUF;         //P0 show UART data
//        P2 = (S2CON & S2RB8);//P2.2 show parity bit,P2.2展示校验位,貌似没有意义
		if(pcom==0x82)  	//地址修改处
		{  
	   		have_data=1; 	//查询有无数据
	   	}
    }

#if 0		//发送数据
    if (S2CON & S2TI)
    {
        S2CON &= ~S2TI;     //Clear transmit interrupt flag
        busy = 0;           //Clear transmit busy flag,发送完毕后，表示不忙
    }
#endif
}


//串口1初始化,9600,N,8,1
void serial_port_one_initial()
{
	PCON=0x00;  //复位为00110000 b 若PCON.7=1波特率加倍 
	TMOD=0x21; 	//T0作为定时用,T1作为波特率用 
	TH1=0xFA;  	//11.0592MHZ  4800 	                        
//	SCON=0x40;  //REN=0;SM1=1串口工?                                                         方式1 8位UART,波特率可变,REN=0:禁止接收，REN=1:允许接收    
	SCON=0x50;	//REN=1;SM1=1,方式1，允许接收
	PCON=0x80;	//波特率加倍,波特率变为9600
	ES=1;		//允许串行口中断
	TR1=1;    	//启动定时器1 
}

//串口2初始化,4800,ODD,8,1
void serial_port_two_initial()
{
//sfr  SCON    = 0x98;
//SM0,SM1,SM2,REN,TB8,RB8,TI,RI
//sfr  S2CON    = 0x9A;
//S2SM0,S2SM1,S2SM2,S2REN,S2TB8,S2RB8,S2TI,S2RI
//sfr  S2BUF    = 0x9B;
//sfr  IE2    = 0xAF;
//X,X,X,X,X,X,ESPI,ES2
//串口2只能选择独立波特率发生器作为波特率发生器，不能选择定时器1作为波特率发生器
//	S2CON    =   0x50;   //0101,0000 8位可变波特率，无奇偶校验位,允许接收
#if (PARITYBIT == NONE_PARITY)
    S2CON = 0x50;           //8-bit variable UART
#elif (PARITYBIT == ODD_PARITY) || (PARITYBIT == EVEN_PARITY) || (PARITYBIT == MARK_PARITY)
    S2CON = 0xda;           //9-bit variable UART, parity bit initial to 1
#elif (PARITYBIT == SPACE_PARITY)
    S2CON = 0xd2;           //9-bit variable UART, parity bit initial to 0
#endif 

    BRT = -(FOSC/32/BAUD);  //Set auto-reload vaule of baudrate generator
    AUXR = 0x14;            //波特率发生器工作在1T模式下,S1BRS:0:串口1波特率发生器选择定时器1,1:串口1波特率发生器选择独立波特率发生器
    IE2 = 0x01;             //允许串口2中断,ES2=1
    EA = 1;                 //开总中断
}

//主程序
//如果不调用delay(),使之空闲出现编译警告的话，则程序不会正常运行。
void main()
{
	uchar i,j,k;	 //定义中间变量
	unsigned char xdata *tempdata;
	uchar xdata temp[8];

	ametek_px=ametek_1;

	serial_port_one_initial();	//串口1初始化
	serial_port_two_initial();	//串口2初始化

	SEL=0;		   				//485接收允许

	delay(1000);				//等待连接稳定

	txdata[0] = 0x82;			//地址修改处
	txdata[1] = 0x16;
	txdata[2] = 0x12;

	while(1)
	{
		int n = 10;	//10个油位
		double d_oil,max, min;
		max=0;		 			//油位最大值,确保第一个普通的数据总能赋给max
		min=999;				//油位最小值 确保第一个普通的数据总能赋给min

  		ametek_double=0;//initiatlize the sum to "0"
//	  	delay(130);
		delay(200);
		
		//处理前10个油位数据---------------------------------
		for(i=0;i<10;i++)
	  	{
	    	for(j=0;j<8;j++)
			{
		 		temp[j]=ametek[3+j+9*i];
			}
			d_oil = atof(temp);//character string change to double
	
			if (d_oil >= 999 || d_oil <= -999)		//过滤999
			{
				n--;
			}
			else
			{
		        if (d_oil > max)	  //第一个值，无论是哪个值，都一定要赋给max和min.
		          max = d_oil;        //max和min的值也都是在变化的，应该每次都初始化，所以放在while(1)里            
		        
		        if (d_oil < min)
		          min = d_oil;
	
				ametek_double += d_oil;
			}
	    }
		//处理前10个油位数据结束--------------------------------------------

		if(n<=0) //全是无效数据的时候
		{
			ametek_double=0;  //使采集数据为0
		}
		else
		{
			ametek_double = ametek_double - max - min;	  //去掉最高值和最低值
	    	ametek_double/=(n-2);						  //求平均值
		}
		
		temper_oil=ametek_double*25.4;		//实际的油位高度单位是英寸值，此处将其变成毫米值
		temper_oil=floor(temper_oil);		//上取整mm

	    ametek_double*=2540;				  //实际读出的值是英寸(inch)(1inch=25.4mm)，此处*2540，多放大100倍,是为了取小数点
		ametek_double=floor(ametek_double);  //后两位，从而更方便的组合出发送数据来
		 
		ametek_oil=ametek_double;

		if(ametek_oil<0)	//如果出现负数值，将其变为0，上传的数据不应该出现负数 20160717
		{
			ametek_oil=0;
		}
		
		//油位数据拼接
		txdata[3]=(uchar)(ametek_oil&0x0000007f);
        ametek_oil>>=7;
        txdata[4]=(uchar)(ametek_oil&0x0000007f);
        ametek_oil>>=7;
        txdata[5]=(uchar)(ametek_oil&0x0000007f);
		
		//水位处理-----------------------------------------------
		ametek_double=0;	
		for(j=0;j<8;j++)
		{
	 		temp[j]=ametek[93+j];
		}
#if ADDCODE
		 //2011.01.16 add new code,begin.........
		w_queue[0]=atof(temp);	   //新采样值入队列，低位入队，高位出队。
		if(w_queue[0]>= 999||w_queue[0]<= -999)
		{
		 	w_queue[0]=0;			//如果新值大于999.,则使其等于0	
		}
		w_max=w_queue[0];
		w_min=w_queue[0];
		w_sum=w_queue[0];
		for(w_index=4;w_index!=0;w_index--)	//比较新值和老的4个值
		{
		 	if(w_queue[w_index]>w_max) w_max=w_queue[w_index];		//比较并更新最大值
			else if(w_queue[w_index]<w_min) w_min=w_queue[w_index];	//比较并更新最小值
			w_sum=w_sum+w_queue[w_index];							//追加到和值
			w_queue[w_index]=w_queue[w_index-1];					//队列更新
		}
		w_sum=w_sum-w_max-w_min;
		w_sum=w_sum/3;
		ametek_double=w_sum;
		// 2011.01.16 add new code,end..........
#endif	
		//
//		ametek_double=atof(temp);//character string change to double
	    ametek_double*=2540;
		ametek_double=floor(ametek_double);
		 
		ametek_water=ametek_double;

		if(ametek_water<0)	//如果出现负数值，将其变为0，上传的数据不应该出现负数 20160717
		{
			ametek_water=0;
		}
			
		//水位数据拼接
        txdata[6]=(uchar)(ametek_water&0x7f);
        ametek_water>>=7;
        txdata[7]=(uchar)(ametek_water&0x7f);
        ametek_water>>=7;
        txdata[8]=(uchar)(ametek_water&0x7f);					

		//温度数据处理--------------------------temperature
		ametek_double=0;
	 	
		for(i=0;i<5;i++)	//分别各自填充5个温度点，杆上传5个温度点数据，现在将这5个温度点解析出来
	  	{
	  		for(j=0;j<6;j++)
		 	{
		  		temp[j]=ametek[102+j+6*i];//到266个字节（不包括验证位）
		 	}
//	    	ametek_double+=atof(temp);//character string change to double
	        ametek_5point = atof(temp);
			//ametek_double/=5.0;
			
			if(ametek_5point>45)
			{
				ametek_5point=30;		//20160429如果温度大于45℃，则变为30℃
			}

			ametek_5point+=56;
			ametek_5point/=0.015625;
			ametek_5point=floor(ametek_5point);
			
			ametek_temper=ametek_5point;
			tempdata=switchdgl(ametek_temper);
	//只得到1个数据枢要3个字节 4个字节的数据只需3个字节即3个指针就可以了
			 for(k=(11+2*i);k<(13+2*i);k++)	 //i=0,means 11th位置，i=1,means 12th位置，i=2,means 13th位置
			 {								 //txdata[11]-txdata[12],txdata[13]-txdata[14],txdata[15]-txdata[16]
			 		txdata[k]=*tempdata;
			 		tempdata++;
			 }
	 	}

		for(i=0;i<5;i++)						//循环5次，找出液位下的温度点高度值
		{
			if(ametek_height[i]<temper_oil)		//如果温度点高度值小于液位高度
			{
				t_index=t_index+1;
			}												//温度值相加
		}

		if(t_index==0)	   			//空罐情况，或者液位下没有温度点，求第一个温度点
		{
			for(j=0;j<6;j++)
			{
			 temp[j]=ametek[102+j];	  //ametek[237+j+6*i],把i去掉，此时不用i
			}
		    ametek_double+=atof(temp);//character string change to double
			ametek_double/=1;					 //设置为第一个温度点

			if(ametek_double>45)
			{
				ametek_double=30;		//20160429如果温度大于45℃，则变为30℃
			}
			ametek_double+=56;
			ametek_double/=0.015625;
			ametek_double=floor(ametek_double);
		}
		else if(t_index>0)			   //至少有一个温度点在液位下
		{
			for(i=0;i<t_index;i++)				 //处理t_index个温度点
		  	{
		  		for(j=0;j<6;j++)
			 	{
			  		temp[j]=ametek[102+j+6*i];//到266个字节（不包括验证位）
			 	}
		    	ametek_double+=atof(temp);//character string change to double
		 	}
	
			ametek_double/=t_index;					 //求平均温度值

			if(ametek_double>45)
			{
				ametek_double=30;		//20160429如果温度大于45℃，则变为30℃
			}
			ametek_double+=56;
			ametek_double/=0.015625;
			ametek_double=floor(ametek_double);
		}
		else		//其它一些特殊情况，不明原因，如t_index<0,也赋第1个值
		{
			for(j=0;j<6;j++)
			{
			 temp[j]=ametek[102+j];
			}
		    ametek_double+=atof(temp);//character string change to double
			ametek_double/=1;					 //设置为第一个温度点
			
			if(ametek_double>45)
			{
				ametek_double=30;		//20160429如果温度大于45℃，则变为30℃
			}
			ametek_double+=56;
			ametek_double/=0.015625;
			ametek_double=floor(ametek_double);
		}	

		ametek_temper=ametek_double;
		tempdata=switchdgl(ametek_temper);
			
		t_index=0;			//索引值复原
		ametek_double=0;	//复原
			
		for(i=9;i<11;i++)					 //填充平均温度值 txdata[9]-txdata[10]
		{
			txdata[i]=*tempdata;
			tempdata++;
		}		    
		
		sum=0x00;

		//#if ADDCODE
//	if((have_data==1)&&(w_finish==5))		//w_finish=5表明队列已满，可以发送数据了。
//#endif
		//开始发送数据
//		if(((have_data==1)&&(w_finish==0))||((have_data==1)&&(w_finish==5)))	//第1次回复，第5次开始连续回复
		if(have_data==1)
		{
	    /*add this secntence,PC send"82 16 00 14",full DGL protocol ,AMETEK send data is OK! *
		 *because it prevents sending and receiving at the same time when " have_data=1".    */
//	    	delay(100);
			delay(300);
		
			EA|=0x00;	//关总中断?貌似关不上
	    	SEL=1;		//485发送有效
			if (S2CON & S2TI)
    		{
        		S2CON &= ~S2TI;         //清除发送完成标志
    		}


	//    for(i=0;i<11;i++)
			for(i = 0;i < 21;i++)	
			{
	       
	    		ACC=txdata[i];	  //ACC累加器
	    
				if(~P)	//如果是偶数	//P是奇偶标志位,ACC中1的格式是奇数,则P=1,反之,P=0
		   		{ S2CON |= 0x08;}
				else
	       		{S2CON &= 0xF7;}
	
	    		S2BUF=ACC;
				sum=sum^txdata[i];
	    
				while((S2CON & 0x02) == 0);	 //等待发送成功
	
	     		S2CON &= 0xFd; 	//清除发送标志位
			//	S2CON &= ~S2TI; //清除发送标志
		 	}
	
		 	sum=sum&0x7f;	   //去除最高位,表明是数据而不是地址
		 
		 	if(~P)
		   	{ S2CON |= 0x08;}
		 	else
	       	{S2CON &= 0xF7;}
	     
			ACC=sum;
	  
	     	S2BUF=ACC;
	
			while((S2CON & 0x02) == 0);
	
	     	S2CON &= 0xFd;
		 	 
		 	have_data=0;	//没有数据
			SEL=0;			//接收有效
		 	EA=1;	  	//开总中断
	 	}


	}
	
//	UART1_SendStr("STC12C5A60S2\r\nUart0 Test !\r\n");
//    SendString("STC12C5A60S2\r\nUart2 Test !\r\n");
}


#if 0
void SendData(BYTE dat)
{
    while (busy);           //Wait for the completion of the previous data is sent
    ACC = dat;              //Calculate the even parity bit P (PSW.0)
    if (P)                  //Set the parity bit according to P
    {
#if (PARITYBIT == ODD_PARITY)
        S2CON &= ~S2TB8;    //Set parity bit to 0
#elif (PARITYBIT == EVEN_PARITY)
        S2CON |= S2TB8;     //Set parity bit to 1
#endif
    }
    else
    {
#if (PARITYBIT == ODD_PARITY)
        S2CON |= S2TB8;     //Set parity bit to 1
#elif (PARITYBIT == EVEN_PARITY)
        S2CON &= ~S2TB8;    //Set parity bit to 0
#endif
    }
    busy = 1;
    S2BUF = ACC;            //Send data to UART2 buffer
}

/*----------------------------
Send a string to UART
Input: s (address of string)
Output:None
----------------------------*/
void SendString(char *s)
{
    while (*s)              //Check the end of the string
    {
        SendData(*s++);     //Send current char and increment string ptr
    }
}

#endif

